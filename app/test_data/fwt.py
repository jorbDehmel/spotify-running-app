'''
Validate output of custom FWT implementation by corroboration.
This is a resource for generating random FWT input data, which
is then written to a local JSON file.
'''

import json
from typing import List, Iterable, Dict
from random import uniform
import pywt


def generate_test_file(filepath: str, pow_range: Iterable,
        vec_size: int, rng_range: float) -> None:
    '''
    Generates a file consisting of inputs and expected outputs
    which can be read by dart. This must be generated by Python,
    since it contains a valid implementation of the FWT to test
    against. Saves as a json file, which is a list of test
    cases. Each test case has a `input` and `output` member,
    both of which are lists of numbers.

    This will generate `vec_size` instances for each size in
    `pow_range`. Every item in every vector will be generated
    by `uniform(-rng_range, rng_range)`.
    '''

    to_jsonify: List[Dict[str, str]] = []

    for size in pow_range:

        for _ in range(vec_size):

            input_vec: List[float] = [
                uniform(-rng_range, rng_range)
                for _ in range(2 ** size)]

            output_vec: List[float] = []
            coeffs = pywt.wavedec(input_vec, 'haar')

            # Concat and print as Dart fn does
            for coeff_l in coeffs:
                output_vec += [round(float(item), 5)
                            for item in coeff_l]

            to_jsonify.append({
                'input': input_vec,
                'output': output_vec})

    with open(filepath, 'w', encoding='UTF8') as file:
        json.dump(to_jsonify, file)


def main():
    '''
    Main function
    '''

    MIN_POW: int = 1
    MAX_POW: int = 10
    PER_SIZE: int = 16
    RANGE: float = 10_000.0

    print('Writing test file...')

    generate_test_file(
        'test_data.json',
        range(MIN_POW, MAX_POW),
        PER_SIZE,
        RANGE)

    print('Wrote test data.')


if __name__ == '__main__':
    main()
